filter(
transaction_type %in% c("in","out"),
edition_type %in% c('STN editions', 'Livres en Société: STN joint editions', 'Commissioned STN edition')
) %>%
# Sum up by year for each transaction type
group_by(transaction_type, year) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
drop_na() %>%
ungroup() %>%
ggplot(aes(x = year, y = sheets_used, colour = transaction_type)) +
geom_line() +
theme_minimal() +
scale_colour_discrete(labels = c("in" = "Printing", "out" = "Out transaction")) +
scale_y_continuous(labels = scales::comma_format()) +
labs(
title = "Print runs and out-transactions compared",
colour = "Transaction\ntype",
y = "Sheets used (estimate)",
x = "Year"
)
warnings()
update.packages()
rm(list = ls())
update.packages()
install.packages('colorspace')
install.packages('git2r')
transactions %>%
mutate(
# Make all number positive
total_number_of_volumes = abs(total_number_of_volumes),
# Sort the 34 different transaction types into the three main ones
transaction_type = case_when(
# We are only interesting in print runs among the in transactions
str_detect(direction_of_transaction, regex("printing", ignore_case = T)) ~ "in",
str_detect(direction_of_transaction, regex("^in", ignore_case = T)) ~ "NA",
str_detect(direction_of_transaction, regex("^out", ignore_case = T)) ~ "out",
TRUE ~ "neutral"
),
# Calculate how many sheets were used for each transaction
sheets_used = total_number_of_volumes / number_of_volumes * sheets_estimate,
# Infer year data
year = lubridate::ymd(date) %>% lubridate::year()
) %>%
# Just focus on editions the STN manufactured themselves
filter(
transaction_type %in% c("in","out"),
edition_type %in% c('STN editions', 'Livres en Société: STN joint editions', 'Commissioned STN edition')
) %>%
# Sum up by year for each transaction type
group_by(transaction_type, year) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
drop_na() %>%
ungroup() %>%
ggplot(aes(x = year, y = sheets_used, colour = transaction_type)) +
theme_minimal() +
scale_colour_discrete(labels = c("in" = "Printing", "out" = "Out transaction")) +
scale_y_continuous(labels = scales::comma_format()) +
labs(
title = "Print runs and out-transactions compared",
colour = "Transaction\ntype",
y = "Sheets used (estimate)",
x = "Year"
) +
geom_line()
install.packages('tidyverse')
install.packages('lazyeval')
transactions %>%
mutate(
# Make all number positive
total_number_of_volumes = abs(total_number_of_volumes),
# Sort the 34 different transaction types into the three main ones
transaction_type = case_when(
# We are only interesting in print runs among the in transactions
str_detect(direction_of_transaction, regex("printing", ignore_case = T)) ~ "in",
str_detect(direction_of_transaction, regex("^in", ignore_case = T)) ~ "NA",
str_detect(direction_of_transaction, regex("^out", ignore_case = T)) ~ "out",
TRUE ~ "neutral"
),
# Calculate how many sheets were used for each transaction
sheets_used = total_number_of_volumes / number_of_volumes * sheets_estimate,
# Infer year data
year = lubridate::ymd(date) %>% lubridate::year()
) %>%
# Just focus on editions the STN manufactured themselves
filter(
transaction_type %in% c("in","out"),
edition_type %in% c('STN editions', 'Livres en Société: STN joint editions', 'Commissioned STN edition')
) %>%
# Sum up by year for each transaction type
group_by(transaction_type, year) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
drop_na() %>%
ungroup() %>%
ggplot(aes(x = year, y = sheets_used, colour = transaction_type)) +
theme_minimal() +
scale_colour_discrete(labels = c("in" = "Printing", "out" = "Out transaction")) +
scale_y_continuous(labels = scales::comma_format()) +
labs(
title = "Print runs and out-transactions compared",
colour = "Transaction\ntype",
y = "Sheets used (estimate)",
x = "Year"
) +
geom_line()
library(kableExtra)
library(kableExtra)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Connect to the database and load functions and packages
source('init.R')
# Import key data
orders <- fetch_table(stn, "orders") # Each transaction is part of an overarching 'order'
editions <- fetch_table(stn, "books") %>%
# Estimate the sheets using the 'edition' and 'pages' info
mutate(
book_sheets = str_remove(book_sheets, "\\D") %>% as.numeric(),
total_pages = sum_pages(pages),
leaves = str_replace(edition, "[Ff]olio", "2") %>% str_remove("\\D") %>% as.numeric(),
sheets_estimate = calculate_sheets(total_pages, leaves)
) # Each transaction concerns a particular edition
transactions <- fetch_table(stn, "transactions") %>% # Load transaction data
left_join(orders, by = "order_code") %>% # Join to order information (e.g. to get dates)
left_join(editions, by = "book_code") # Joine to edition information (e.g. to get format details)
rm(list = ls())
library(kableExtra)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
install.packages(c("colorspace", "git2r", "Matrix"))
library(kableExtra)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Connect to the database and load functions and packages
source('init.R')
# Import key data
orders <- fetch_table(stn, "orders") # Each transaction is part of an overarching 'order'
editions <- fetch_table(stn, "books") %>%
# Estimate the sheets using the 'edition' and 'pages' info
mutate(
book_sheets = str_remove(book_sheets, "\\D") %>% as.numeric(),
total_pages = sum_pages(pages),
leaves = str_replace(edition, "[Ff]olio", "2") %>% str_remove("\\D") %>% as.numeric(),
sheets_estimate = calculate_sheets(total_pages, leaves)
) # Each transaction concerns a particular edition
transactions <- fetch_table(stn, "transactions") %>% # Load transaction data
left_join(orders, by = "order_code") %>% # Join to order information (e.g. to get dates)
left_join(editions, by = "book_code") # Joine to edition information (e.g. to get format details)
transactions %>%
mutate(direction_of_transaction = str_to_lower(direction_of_transaction)) %>%
# exclude all 'in' and 'out' transactions
filter(!str_detect(direction_of_transaction, "^in|^out")) %>%
mutate(year = lubridate::ymd(date) %>% lubridate::year())
transactions %>%
mutate(direction_of_transaction = str_to_lower(direction_of_transaction)) %>%
# exclude all 'in' and 'out' transactions
filter(!str_detect(direction_of_transaction, "^in|^out")) %>%
mutate(year = lubridate::ymd(date) %>% lubridate::year()) %>%
ggplot(aes(x = year, y = total_number_of_volumes, fill = direction_of_transaction)) +
geom_col() +
scale_y_continuous(labels = scales::comma_format()) +
labs(
title = 'Other transactions in the STN data',
x = 'Year',
y = 'Number of volumes',
fill = 'Transaction type'
) +
theme_bw()
transactions %>%
mutate(
# Make all number positive
total_number_of_volumes = abs(total_number_of_volumes),
# Sort the 34 different transaction types into the three main ones
transaction_type = case_when(
# We are only interesting in print runs among the in transactions
str_detect(direction_of_transaction, regex("printing", ignore_case = T)) ~ "in",
str_detect(direction_of_transaction, regex("^in", ignore_case = T)) ~ "NA",
str_detect(direction_of_transaction, regex("^out", ignore_case = T)) ~ "out",
TRUE ~ "neutral"
),
# Calculate how many sheets were used for each transaction
sheets_used = total_number_of_volumes / number_of_volumes * sheets_estimate,
# Infer year data
year = lubridate::ymd(date) %>% lubridate::year()
) %>%
# Just focus on editions the STN manufactured themselves
filter(
transaction_type %in% c("in","out"),
edition_type %in% c('STN editions', 'Livres en Société: STN joint editions', 'Commissioned STN edition')
) %>%
# Sum up by year for each transaction type
group_by(transaction_type, year) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
drop_na() %>%
ungroup() %>%
ggplot(aes(x = year, y = sheets_used, colour = transaction_type)) +
theme_minimal() +
scale_colour_discrete(labels = c("in" = "Printing", "out" = "Out transaction")) +
scale_y_continuous(labels = scales::comma_format()) +
labs(
title = "Print runs and out-transactions compared",
colour = "Transaction\ntype",
y = "Sheets used (estimate)",
x = "Year"
) +
geom_line()
transactions %>%
mutate(
# Make all number positive
total_number_of_volumes = abs(total_number_of_volumes),
# Sort the 34 different transaction types into the three main ones
transaction_type = case_when(
# We are only interesting in print runs among the in transactions
str_detect(direction_of_transaction, regex("printing", ignore_case = T)) ~ "in",
str_detect(direction_of_transaction, regex("^in", ignore_case = T)) ~ "NA",
str_detect(direction_of_transaction, regex("^out", ignore_case = T)) ~ "out",
TRUE ~ "neutral"
),
# Calculate how many sheets were used for each transaction
sheets_used = total_number_of_volumes / number_of_volumes * sheets_estimate,
# Infer year data
year = lubridate::ymd(date) %>% lubridate::year()
) %>%
# Just focus on editions the STN manufactured themselves
filter(
transaction_type %in% c("in","out"),
edition_type %in% c('STN editions', 'Livres en Société: STN joint editions', 'Commissioned STN edition')
) %>%
# Sum up by year for each transaction type
group_by(transaction_type, year) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
drop_na() %>%
ungroup() %>%
ggplot(aes(x = year, y = sheets_used, colour = transaction_type)) +
theme_minimal() +
scale_colour_discrete(labels = c("in" = "Printing", "out" = "Out transaction")) +
scale_y_continuous(labels = scales::comma_format()) +
labs(
title = "Print runs and out-transactions compared",
colour = "Transaction\ntype",
y = "Sheets used (estimate)",
x = "Year"
) +
geom_line()
transactions %>%
mutate(
# Make all number positive
total_number_of_volumes = abs(total_number_of_volumes),
# Sort the 34 different transaction types into the three main ones
transaction_type = case_when(
# We are only interesting in print runs among the in transactions
str_detect(direction_of_transaction, regex("printing", ignore_case = T)) ~ "in",
str_detect(direction_of_transaction, regex("^in", ignore_case = T)) ~ "NA",
str_detect(direction_of_transaction, regex("^out", ignore_case = T)) ~ "out",
TRUE ~ "neutral"
),
# Calculate how many sheets were used for each transaction
sheets_used = total_number_of_volumes / number_of_volumes * sheets_estimate,
# Infer year data
year = lubridate::ymd(date) %>% lubridate::year()
) %>%
# Just focus on editions the STN manufactured themselves
filter(
transaction_type %in% c("in","out"),
edition_type %in% c('STN editions', 'Livres en Société: STN joint editions', 'Commissioned STN edition')
) %>%
# Sum up by year for each transaction type
group_by(transaction_type, year) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
drop_na() %>%
ungroup()
editions %>% filter(is.na(pages))
editions %>% filter(is.na(pages), !is.na(quick_pages))
editions %>% filter(book_code == 'bk0002678')
editions %>% filter(book_code == 'bk0002678') %>% select(pages, total_pages, quick_pages)
# Connect to the database and load functions and packages
source('init.R')
# Import key data
orders <- fetch_table(stn, "orders") # Each transaction is part of an overarching 'order'
editions <- fetch_table(stn, "books") %>%
# Estimate the sheets using the 'edition' and 'pages' info
mutate(
book_sheets = str_remove(book_sheets, "\\D") %>% as.numeric(),
total_pages = sum_pages(pages),
leaves = str_replace(edition, "[Ff]olio", "2") %>% str_remove("\\D") %>% as.numeric(),
sheets_estimate = calculate_sheets(total_pages, leaves)
) # Each transaction concerns a particular edition
transactions <- fetch_table(stn, "transactions") %>% # Load transaction data
left_join(orders, by = "order_code") %>% # Join to order information (e.g. to get dates)
left_join(editions, by = "book_code") # Joine to edition information (e.g. to get format details)
sum_pages <- function(pages) {
#############
#
# Given a character vector of page number information, this finds any Roman or
# Hindu-Arabic numerals and sums them.
#
# depends:
#   stringr (part of the tidyverse)
#
# params:
#   pages: a character vector
#
# returns:
#   num_pages: the total pages
#
#############
require(stringr)
# Search for roman numerals
rom_reg <- regex("
(?<![abcdefghjknopqrstuwxyz]) # do not find a match if there are any non-roman letters or an 'e.' (i.e.)
[ivxlcdm]+  # look for any number of the roman numerals
(?![abcdefghjknopqrstuwxyz]|\\.\\s?e|,?\\s\\[i\\.|-) # do not find a match if there are any non-roman letters, an '.e', an 'i.e.' or a hyphen
", comments = T,
ignore_case = T)
roman <- str_match_all(pages, rom_reg)
# roman is a list with a column vector of strings for each book
roman <- lapply(roman, as.roman) # interpret all roman numerals using built in R function
roman_totals <- sapply(roman, sum) # then sum all the results
# now extract hindu-arabic numerals
# need negative lookahead for page range issue (see below)
# need negative lookahead to ignore numbers followed by 'i.e.', which indicates corrections
hindu_arabic <- str_match_all(pages, "\\d+(?!]?-|,?\\s\\[i\\.\\s?e\\.\\s?)")
hindu_arabic_totals <- sapply(hindu_arabic, function(x) return(sum(as.numeric(x))))
# Now extrac the beginnings of page ranges
# e.g. if [3]-20 appears in the page description, then there are 20 - 3 + 1 = 18 actual pages.
to_deduct_hindu <- str_match_all(pages, "\\d+(?=]?-)") %>%
sapply(function(x) return(sum(as.numeric(x)) - length(x)))
rom_deduct_reg <- regex("
(?<![abcdefghjknopqrstuwxyz]|e\\.\\s?]) # do not find a match if there are any non-roman letters or an 'e.' (i.e.)
[ivxlcdm]+  # look for any number of the roman numerals
(?![abcdefghjknopqrstuwxyz]|\\.\\s?e) # do not find a match if there are any non-roman letters, an '.e' or a hyphen
", comments = T,
ignore_case = T)
to_deduct_roman <- str_match_all(pages, rom_deduct_reg) %>%
sapply(function(x) return(sum(as.numeric(x)) - length(x)))
# add these two amounts to get the total pages for each book
num_pages <- roman_totals + hindu_arabic_totals - to_deduct_hindu - to_deduct_roman
return(num_pages)
}
# Connect to the database and load functions and packages
source('init.R')
# Import key data
orders <- fetch_table(stn, "orders") # Each transaction is part of an overarching 'order'
editions <- fetch_table(stn, "books") %>%
# Estimate the sheets using the 'edition' and 'pages' info
mutate(
book_sheets = str_remove(book_sheets, "\\D") %>% as.numeric(),
total_pages = sum_pages(pages),
leaves = str_replace(edition, "[Ff]olio", "2") %>% str_remove("\\D") %>% as.numeric(),
sheets_estimate = calculate_sheets(total_pages, leaves)
) # Each transaction concerns a particular edition
transactions <- fetch_table(stn, "transactions") %>% # Load transaction data
left_join(orders, by = "order_code") %>% # Join to order information (e.g. to get dates)
left_join(editions, by = "book_code") # Joine to edition information (e.g. to get format details)
editions %>% filter(is.na(total_pages), !is.na(pages))
editions %>% filter(is.na(total_pages))
editions %>% filter(!is.na(total_pages))
sum_pages <- function(pages) {
#############
#
# Given a character vector of page number information, this finds any Roman or
# Hindu-Arabic numerals and sums them.
#
# depends:
#   stringr (part of the tidyverse)
#
# params:
#   pages: a character vector
#
# returns:
#   num_pages: the total pages
#
#############
require(stringr)
# Search for roman numerals
rom_reg <- regex("
(?<![abcdefghjknopqrstuwxyz]) # do not find a match if there are any non-roman letters or an 'e.' (i.e.)
[ivxlcdm]+  # look for any number of the roman numerals
(?![abcdefghjknopqrstuwxyz]|\\.\\s?e|,?\\s\\[i\\.|-) # do not find a match if there are any non-roman letters, an '.e', an 'i.e.' or a hyphen
", comments = T,
ignore_case = T)
roman <- str_match_all(pages, rom_reg)
# roman is a list with a column vector of strings for each book
roman <- lapply(roman, as.roman) # interpret all roman numerals using built in R function
roman_totals <- sapply(roman, sum) # then sum all the results
# now extract hindu-arabic numerals
# need negative lookahead for page range issue (see below)
# need negative lookahead to ignore numbers followed by 'i.e.', which indicates corrections
hindu_arabic <- str_match_all(pages, "\\d+(?!]?-|,?\\s\\[i\\.\\s?e\\.\\s?)")
hindu_arabic_totals <- sapply(hindu_arabic, function(x) return(sum(as.numeric(x))))
# Now extrac the beginnings of page ranges
# e.g. if [3]-20 appears in the page description, then there are 20 - 3 + 1 = 18 actual pages.
to_deduct_hindu <- str_match_all(pages, "\\d+(?=]?-)") %>%
sapply(function(x) return(sum(as.numeric(x)) - length(x)))
rom_deduct_reg <- regex("
(?<![abcdefghjknopqrstuwxyz]|e\\.\\s?]) # do not find a match if there are any non-roman letters or an 'e.' (i.e.)
[ivxlcdm]+  # look for any number of the roman numerals
(?![abcdefghjknopqrstuwxyz]|\\.\\s?e) # do not find a match if there are any non-roman letters, an '.e' or a hyphen
", comments = T,
ignore_case = T)
to_deduct_roman <- str_match_all(pages, rom_deduct_reg) %>%
lapply(as.roman) %>%
sapply(function(x) return(sum(as.numeric(x)) - length(x)))
# add these two amounts to get the total pages for each book
num_pages <- roman_totals + hindu_arabic_totals - to_deduct_hindu - to_deduct_roman
return(num_pages)
}
# Connect to the database and load functions and packages
source('init.R')
# Import key data
orders <- fetch_table(stn, "orders") # Each transaction is part of an overarching 'order'
editions <- fetch_table(stn, "books") %>%
# Estimate the sheets using the 'edition' and 'pages' info
mutate(
book_sheets = str_remove(book_sheets, "\\D") %>% as.numeric(),
total_pages = sum_pages(pages),
leaves = str_replace(edition, "[Ff]olio", "2") %>% str_remove("\\D") %>% as.numeric(),
sheets_estimate = calculate_sheets(total_pages, leaves)
) # Each transaction concerns a particular edition
transactions <- fetch_table(stn, "transactions") %>% # Load transaction data
left_join(orders, by = "order_code") %>% # Join to order information (e.g. to get dates)
left_join(editions, by = "book_code") # Joine to edition information (e.g. to get format details)
stn_trans_sheets <- transactions %>%
mutate(
# Make all number positive
total_number_of_volumes = abs(total_number_of_volumes),
# Sort the 34 different transaction types into the three main ones
transaction_type = case_when(
# We are only interesting in print runs among the in transactions
str_detect(direction_of_transaction, regex("printing", ignore_case = T)) ~ "in",
str_detect(direction_of_transaction, regex("^in", ignore_case = T)) ~ "NA",
str_detect(direction_of_transaction, regex("^out", ignore_case = T)) ~ "out",
TRUE ~ "neutral"
),
# Calculate how many sheets were used for each transaction
sheets_used = total_number_of_volumes / number_of_volumes * sheets_estimate,
# Infer year data
year = lubridate::ymd(date) %>% lubridate::year()
) %>%
# Just focus on editions the STN manufactured themselves
filter(
transaction_type %in% c("in","out"),
edition_type %in% c('STN editions', 'Livres en Société: STN joint editions', 'Commissioned STN edition')
)
stn_trans_sheets %>%
# Sum up by year for each transaction type
group_by(transaction_type, year) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
drop_na() %>%
ungroup() %>%
ggplot(aes(x = year, y = sheets_used, colour = transaction_type)) +
theme_minimal() +
scale_colour_discrete(labels = c("in" = "Printing", "out" = "Out transaction")) +
scale_y_continuous(labels = scales::comma_format()) +
labs(
title = "Print runs and out-transactions compared",
colour = "Transaction\ntype",
y = "Sheets used (estimate)",
x = "Year"
) +
geom_line()
# Look first at 1779 printings
stn_trans_sheets %>%
filter(transaction_type == "in", year == 1779) %>%
group_by(book_code) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
arrange(desc(sheets_used))
# Look first at 1779 printings
stn_trans_sheets %>%
filter(transaction_type == "in", year == 1779) %>%
group_by(book_code) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T), -stn_abbreviated_title) %>%
arrange(desc(sheets_used))
# Look first at 1779 printings
stn_trans_sheets %>%
filter(transaction_type == "in", year == 1779) %>%
group_by(book_code, stn_abbreviated_title) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
arrange(desc(sheets_used))
# Look first at 1779 printings
stn_trans_sheets %>%
filter(transaction_type == "in", year == 1779) %>%
group_by(book_code, stn_abbreviated_title) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
arrange(desc(sheets_used)) %>%
kable() %>%
kable_styling(full_width = F) %>%
scroll_box(height = '400px')
# Then at the 1882 sales
stn_trans_sheets %>%
filter(transaction_type == "out", year == 1882) %>%
group_by(book_code, stn_abbreviated_title) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
arrange(desc(sheets_used)) %>%
kable() %>%
kable_styling(full_width = F) %>%
scroll_box(height = '400px')
# Look first at 1779 printings
stn_trans_sheets %>%
filter(transaction_type == "in", year == 1779) %>%
group_by(book_code, stn_abbreviated_title) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
arrange(desc(sheets_used)) %>%
kable() %>%
kable_styling(full_width = F) %>%
scroll_box(height = '400px')
# Then at the 1882 sales
stn_trans_sheets %>%
filter(transaction_type == "out", year == 1782) %>%
group_by(book_code, stn_abbreviated_title) %>%
summarise(sheets_used = sum(sheets_used, na.rm = T)) %>%
arrange(desc(sheets_used)) %>%
kable() %>%
kable_styling(full_width = F) %>%
scroll_box(height = '400px')
?kable
install.packages("kableExtra")
